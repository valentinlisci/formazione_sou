Vagrant.configure("2") do |config|
  config.vm.define "rocky" do |rocky|
    rocky.vm.box = "bento/rockylinux-9"
    rocky.vm.hostname = "rocky"
    rocky.vm.network "private_network", ip: "192.168.56.10"
    rocky.vm.network "forwarded_port", guest: 5000, host: 5000

    # Cartella condivisa: tutto in /vagrant
    rocky.vm.synced_folder "/Users/valentinlisci/Desktop/formazione_sou_k8s", "/vagrant"

    # Installazione Ansible e collezioni
    rocky.vm.provision "shell", inline: <<-SHELL
      sudo dnf install -y epel-release
      sudo dnf install -y ansible python3-pip
      sudo pip3 install --upgrade ansible-core
      export ANSIBLE_COLLECTIONS_PATHS=/root/.ansible/collections
      ansible-galaxy collection install community.kubernetes
    SHELL

    # Esecuzione playbook (path assoluto)
    rocky.vm.provision "ansible" do |ansible|
      ansible.playbook = "/Users/valentinlisci/Desktop/formazione_so/worckstationMac/playbook.yml"
      ansible.become = true
      ansible.compatibility_mode = "2.0"
    end

    # Provision Jenkins Agent: installa kubectl/helm e copia kubeconfig
    rocky.vm.provision "shell", inline: <<-SHELL
      echo "[INFO] Inizio configurazione Jenkins Agent..."

      AGENT_ID=$(docker ps -qf "name=jenkins-agent")
      if [ -z "$AGENT_ID" ]; then
        echo "[ERRORE] Nessun container Jenkins agent trovato"
        exit 1
      fi

      echo "[INFO] Container Jenkins Agent ID: $AGENT_ID"

      echo "[INFO] Installo kubectl nel container..."
      docker exec -u root $AGENT_ID bash -c '
        curl -LO https://dl.k8s.io/release/v1.30.1/bin/linux/amd64/kubectl && \
        chmod +x kubectl && \
        mv kubectl /usr/local/bin/kubectl
      '

      echo "[INFO] Installo helm nel container..."
      docker exec -u root $AGENT_ID bash -c '
        curl -LO https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz && \
        tar -xzf helm-v3.14.3-linux-amd64.tar.gz && \
        mv linux-amd64/helm /usr/local/bin/helm && \
        chmod +x /usr/local/bin/helm && \
        rm -rf linux-amd64 helm-v3.14.3-linux-amd64.tar.gz
      '

      echo "[INFO] Creo cartella .kube nel container..."
      docker exec -u root $AGENT_ID mkdir -p /home/jenkins/.kube

      echo "[INFO] Copio kubeconfig.yaml nel container Jenkins Agent..."
      docker cp /vagrant/kubeconfig.yaml $AGENT_ID:/home/jenkins/.kube/config

      echo "[INFO] Imposto permessi corretti su .kube/config"
      docker exec -u root $AGENT_ID chown -R jenkins:jenkins /home/jenkins/.kube

      echo "[SUCCESSO] kubectl e helm installati nel container Jenkins Agent!"
    SHELL

    # Provision finale: copia kubeconfig dalla shared folder e imposta permessi
    rocky.vm.provision "shell", inline: <<-SHELL
      echo "[INFO] ➤ Inizio provisioning kubeconfig in Jenkins agent..."

      # Verifica presenza del file kubeconfig.yaml nella VM
      if [ ! -f /vagrant/kubeconfig.yaml ]; then
        echo "[ERRORE] kubeconfig.yaml non trovato in /vagrant. Assicurati che sia in: /Users/valentinlisci/Desktop/formazione_sou_k8s/"
        exit 1
      fi

      # Copia kubeconfig.yaml dalla cartella condivisa nella home vagrant
      cp /vagrant/kubeconfig.yaml /home/vagrant/kubeconfig.yaml

      # Trova ID del container Jenkins agent
      AGENT_ID=$(docker ps -qf "name=jenkins-agent")
      if [ -z "$AGENT_ID" ]; then
        echo "[ERRORE] Container jenkins-agent non trovato"
        exit 1
      fi

      # Crea la cartella .kube nel container
      docker exec -u root $AGENT_ID mkdir -p /home/jenkins/.kube

      # Copia il kubeconfig.yaml dentro al container
      docker cp /home/vagrant/kubeconfig.yaml $AGENT_ID:/home/jenkins/.kube/config

      # Imposta i permessi per l'utente jenkins
      docker exec -u root $AGENT_ID chown -R jenkins:jenkins /home/jenkins/.kube

      # Esporta la variabile KUBECONFIG per l'utente jenkins (in modo persistente)
      docker exec -u jenkins $AGENT_ID bash -c 'echo "export KUBECONFIG=/home/jenkins/.kube/config" >> /home/jenkins/.bashrc'

      # Esporta la variabile KUBECONFIG anche per root
      docker exec -u root $AGENT_ID bash -c 'echo "export KUBECONFIG=/home/jenkins/.kube/config" >> /root/.bashrc'

      # Esporta la variabile KUBECONFIG globalmente per tutte le shell
      docker exec -u root $AGENT_ID bash -c 'echo "export KUBECONFIG=/home/jenkins/.kube/config" > /etc/profile.d/kubeconfig.sh'

      sudo usermod -aG docker vagrant

      echo "[SUCCESSO] kubeconfig copiato e configurato nel Jenkins Agent!"
    SHELL

    # Debug: verifica variabile KUBECONFIG
    rocky.vm.provision "shell", inline: <<-SHELL
      echo "[INFO] ➤ Verifica variabile KUBECONFIG nel Jenkins agent..."

      # Trova ID del container Jenkins agent
      AGENT_ID=$(docker ps -qf "name=jenkins-agent")
      if [ -z "$AGENT_ID" ]; then
        echo "[ERRORE] Container jenkins-agent non trovato"
        exit 1
      fi

      # Accedi al container e verifica la variabile KUBECONFIG
      docker exec -u jenkins -it $AGENT_ID bash -c "echo \$KUBECONFIG"

      echo "[SUCCESSO] Variabile KUBECONFIG verificata nel Jenkins Agent!"
    SHELL
  end

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 2
  end
end
