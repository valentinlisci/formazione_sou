---
- name: Provisioning workstation con strumenti DevOps e Jenkins
  hosts: all
  become: true
  gather_facts: true

  vars:
    jenkins_url: "http://192.168.56.10:8080"
    jenkins_user: "valentin"
    jenkins_password: "valentin"
    agent_name: "my-agent"
    agent_container_name: "nuovo-agent"
    agent_work_dir: "/home/jenkins/agent"
   

  tasks:
    # Pacchetti di base
    - name: Installa pacchetti di sistema
      ansible.builtin.dnf:
        name:
          - curl
          - tar
          - git
          - socat
          - dnf-utils
          - device-mapper-persistent-data
          - lvm2
        state: present
        update_cache: true
      when: ansible_os_family == "RedHat"

    - name: Configurazione Jenkins Agent tramite API
      include_tasks: ../jenkins-api/jenkins_agent_config.yml

    # Aggiorna cache DNF 
    - name: Aggiorna la cache DNF
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_os_family == "RedHat"

    # Scarica kubectl
    - name: Scarica kubectl
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/v1.30.1/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'

    # Scarica kind
    - name: Scarica kind
      ansible.builtin.get_url:
        url: https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
        dest: /usr/local/bin/kind
        mode: '0755'

    # Scarica Helm
    - name: Scarica Helm
      ansible.builtin.get_url:
        url: "https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz"
        dest: /tmp/helm-v3.14.3-linux-amd64.tar.gz
        mode: '0644'

    - name: Estrai Helm
      ansible.builtin.unarchive:
        src: /tmp/helm-v3.14.3-linux-amd64.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Copia binario helm in /usr/local/bin
      ansible.builtin.copy:
        remote_src: yes
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: '0755'

    # Jenkins agent workspace
    - name: Crea directory per Jenkins agent persistente
      ansible.builtin.file:
        path: /home/vagrant/jenkins-agent
        state: directory
        owner: 1000
        group: 1000
        mode: '0777'

    # Docker setup
    - name: Aggiungi chiave GPG Docker
      ansible.builtin.rpm_key:
        state: present
        key: https://download.docker.com/linux/centos/gpg
      when: ansible_os_family == "RedHat"

    - name: Aggiungi il repository ufficiale Docker
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_os_family == "RedHat"

    - name: Installa Docker Engine
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: yes
      when: ansible_os_family == "RedHat"
      register: risultato_installazione_docker

    - name: Riavvia se Docker Ã¨ stato installato
      ansible.builtin.reboot:
        reboot_timeout: 600
      when: risultato_installazione_docker.changed

    - name: Abilita e avvia il servizio Docker
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    # Firewall per Jenkins
    - name: Assicurati che firewalld sia in esecuzione e abilitato
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Apri la porta 8080 di Jenkins nel firewall
      ansible.posix.firewalld:
        port: 8080/tcp
        permanent: yes
        state: enabled
      notify: Ricarica firewalld

    - name: Apri la porta 50000 di Jenkins nel firewall
      ansible.posix.firewalld:
        port: 50000/tcp
        permanent: yes
        state: enabled
      notify: Ricarica firewalld

    # Jenkins home
    - name: Crea la directory home di Jenkins per la persistenza dei dati
      ansible.builtin.file:
        path: /var/jenkins_home
        state: directory
        mode: '0777'
        owner: 1000
        group: 1000

    # Crea rete Docker dedicata per CI
    - name: Crea rete docker 'ci_net' con subnet fissa
      community.docker.docker_network:
        name: ci_net
        ipam_config:
          - subnet: 172.18.0.0/16

    # Jenkins master container con IP statico
    - name: Avvia il container Jenkins Master con IP statico
      community.docker.docker_container:
        name: jenkins-master
        image: jenkins/jenkins:lts-jdk17
        pull: yes
        networks:
          - name: ci_net
            ipv4_address: 172.18.0.10
        ports:
          - "8080:8080"
          - "50000:50000"
        volumes:
          - /var/jenkins_home:/var/jenkins_home
          - /var/run/docker.sock:/var/run/docker.sock
        restart_policy: always
        state: started
        hostname: jenkins-master

    # Test Docker
    - name: Esegui un container 'hello-world' per testare Docker
      community.docker.docker_container:
        name: test-hello-world
        image: hello-world:latest
        state: started
        auto_remove: yes

    # Jenkins agent container con IP statico
    - name: Avvia Jenkins Agent con IP statico
      community.docker.docker_container:
        name: jenkins-agent
        image: jenkins/inbound-agent
        user: root
        networks:
          - name: ci_net
            ipv4_address: 172.18.0.11
        env:
          JENKINS_URL: "http://172.18.0.10:8080"
          JENKINS_AGENT_NAME: "agent1"
          JENKINS_WEB_SOCKET: "true"
          JENKINS_SECRET: "d595a57c5927e8d4e85bc421de2e8620a290154d6f50b29c8e02c7121d095b2e"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          
          - /home/vagrant/jenkins-agent:/home/jenkins/agent
        state: started
        restart_policy: always

    # Git install
    - name: Installa git (cache apt/dnf)
      ansible.builtin.package:
        name: git
        state: present

    - name: Configura Jenkins Agent via REST API
      import_tasks: /Users/valentinlisci/Desktop/formazione_sou/jenkins-api/jenkins_agent_config.yml

    - name: Aggiungi permessi all'utente vagrant per accedere al socket Docker
      ansible.builtin.file:
        path: /var/run/docker.sock
        owner: root
        group: vagrant
        mode: '0660'

  handlers:
    - name: Ricarica firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: reloaded
      listen: "Ricarica firewalld"